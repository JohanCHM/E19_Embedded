#include "xparameters.h"
#include "xscutimer.h"
#include "math.h"

//Timer defs
#define TIMER_DEVICE_ID		XPAR_XSCUTIMER_0_DEVICE_ID
#define ONE_SECOND 			325000000

//Matrix size
#define MSIZE 4
#define MSIZE3 3
#define MSIZE5 5
#define MSIZE7 7

//Matrix 3x3
typedef union {
	signed char comp[MSIZE3];
	signed int vect;
} vectorType3;

typedef vectorType3 VectorArray3[MSIZE3];

//Matrix 5x5
typedef union {
	unsigned char comp[MSIZE5];
	unsigned int vect;
} vectorType5;

typedef vectorType5 VectorArray5[MSIZE5];

//Matrix 7x7
typedef union {
	unsigned char comp[MSIZE7];
	unsigned int vect;
} vectorType7;

typedef vectorType7 VectorArray7[MSIZE7];

void initKernels();
void setInputMatrices(VectorArray3 A, int matrixSize);
void setTestMatrix5(VectorArray5 A, int matrixSize);
void displayMatrix3(VectorArray3 input, int matrixSize);
void displayMatrix5(VectorArray5 input, int matrixSize);
int convolutionSoft(VectorArray3 kernel, VectorArray3 A, int matrixSize);
int conv2Directions(VectorArray3 kernel1, VectorArray3 kernel2, VectorArray3 A, int matrixSize);
void padding(VectorArray5 mSource, VectorArray7 mDest);

//Global variables
VectorArray3 aInst3, sobel3x, sobel3y;
VectorArray5 testMatrix, dest5;
VectorArray7 testMatrixPadded;

void initKernels()
{
	sobel3x[0].comp[0] = 1;
	sobel3x[0].comp[1] = 0;
	sobel3x[0].comp[2] = -1;
	sobel3x[1].comp[0] = 2;
	sobel3x[1].comp[1] = 0;
	sobel3x[1].comp[2] = -2;
	sobel3x[2].comp[0] = 1;
	sobel3x[2].comp[1] = 0;
	sobel3x[2].comp[2] = -1;

	sobel3y[0].comp[0] = -1;
	sobel3y[0].comp[1] = -2;
	sobel3y[0].comp[2] = -1;
	sobel3y[1].comp[0] = 0;
	sobel3y[1].comp[1] = 0;
	sobel3y[1].comp[2] = 0;
	sobel3y[2].comp[0] = 1;
	sobel3y[2].comp[1] = 2;
	sobel3y[2].comp[2] = 1;
}


void setTestMatrix5(VectorArray5 A, int matrixSize)
{
	int aVal = 1;
	int i;
	for(i = 0; i<matrixSize; i++)
	{
		int j;
		for(j = 0; j<matrixSize; j++)
		{
			A[i].comp[j] = aVal;
			aVal++;
		}
	}
}

void setInputMatrices(VectorArray3 A, int matrixSize)
{
	int aVal = 1;
	int i;
	for(i = 0; i<matrixSize; i++)
	{
		int j;
		for(j = 0; j<matrixSize; j++)
		{
			A[i].comp[j] = aVal;
			aVal++;
		}
	}
}

void displayMatrix3(VectorArray3 input, int matrixSize)
{
	xil_printf("Printing matrix: \r\n");
	int i;
	for(i = 0; i<matrixSize; i++)
	{
		int j;
		for(j = 0; j<matrixSize; j++)
		{
			xil_printf("%3d ", input[i].comp[j]);
			if(j == matrixSize-1)
				xil_printf("\r\n");
		}
	}
}

void displayMatrix5(VectorArray5 input, int matrixSize)
{
	xil_printf("Printing matrix: \r\n");
	int i;
	for(i = 0; i<matrixSize; i++)
	{
		int j;
		for(j = 0; j<matrixSize; j++)
		{
			xil_printf("%3d ", input[i].comp[j]);
			if(j == matrixSize-1)
				xil_printf("\r\n");
		}
	}
}

void displayMatrix7(VectorArray7 input, int matrixSize)
{
	xil_printf("Printing matrix: \r\n");
	int i;
	for(i = 0; i<matrixSize; i++)
	{
		int j;
		for(j = 0; j<matrixSize; j++)
		{
			xil_printf("%3d ", input[i].comp[j]);
			if(j == matrixSize-1)
				xil_printf("\r\n");
		}
	}
}

int convUniDirectionSoft(VectorArray3 kernel, VectorArray3 A, int matrixSize)
{
	int acc = 0;
	int i;
	for(i=0; i<matrixSize; i++)
	{
		int j;
		for(j=0; j<matrixSize; j++)
		{
			acc += kernel[matrixSize-1-i].comp[matrixSize-1-j]*A[i].comp[j];
		}
	}
	return acc;
}

int convSoft(VectorArray3 kernel1, VectorArray3 kernel2, VectorArray3 A, int matrixSize)
{
	double res;
	int x = convUniDirectionSoft(kernel1, A, matrixSize);
	int y = convUniDirectionSoft(kernel2, A, matrixSize);
	res = sqrt(pow(x,2)+pow(y,2));
	return res;
}

//mSource is the image.
void padding(VectorArray5 mSource, VectorArray7 mDest)
{
	int i;
	for(i = 0; i<MSIZE7; i++)
	{
		int j;
		for(j = 0; j<MSIZE7; j++)
		{
			if(i == 0 || j == 0 || i == MSIZE7 || j == MSIZE7)
			{
				mDest[i].comp[j] = 0;
			}
			else
			{
				mDest[i].comp[j] = mSource[i-1].comp[j-1];
			}
		}
	}

}

void winSoft(VectorArray5 mSource, VectorArray5 mDest)
{
	VectorArray7 padded;
	padding(mSource, padded);

	int i;
	for(i=1; i<MSIZE7-1; i++)
	{
		int j;
		for(j=1; j<MSIZE7-1; j++)
		{
			VectorArray3 mConv;
			int k;
			for(k=-1; k<2; k++)
			{
				int l;
				for(l=-1; l<2; l++)
				{
					mConv[1+k].comp[1+l] = padded[i+k].comp[j+l];

				}

			}

			//displayMatrix3(mConv, MSIZE3);
			int resul = convSoft(sobel3x, sobel3y, mConv, MSIZE3);
			xil_printf("Convolution result %d, %d is: %d \r\n", i, j, resul);
		}
	}
}



//====================================================

int main (void) 
{
   xil_printf("-- Start of the Program --\r\n");

   XScuTimer Timer;
   XScuTimer *TimerInstancePtr = &Timer;
   XScuTimer_Config *ConfigPtr;
   int Status;
   int cntValueStart, cntValueEnd;

   //Initialize timer
   ConfigPtr = XScuTimer_LookupConfig(TIMER_DEVICE_ID);

   Status = XScuTimer_CfgInitialize(TimerInstancePtr, ConfigPtr,
		   ConfigPtr->BaseAddr);
   if (Status != XST_SUCCESS) {
	   return XST_FAILURE;
   }

   //------For timing the execution--------
   //XScuTimer_LoadTimer(TimerInstancePtr, ONE_SECOND*4);
   //XScuTimer_Start(TimerInstancePtr);
   //cntValueStart = XScuTimer_GetCounterValue(TimerInstancePtr);
   //***** Function here ******
   //cntValueEnd = XScuTimer_GetCounterValue(TimerInstancePtr);

   //Print the time elapsed in clock ticks
   //xil_printf("Time elapsed (in clock ticks): %d \r\n\n", cntValueStart-cntValueEnd);


   initKernels();
   setInputMatrices(aInst3, MSIZE3);
   displayMatrix3(sobel3x, MSIZE3);
   displayMatrix3(sobel3y, MSIZE3);
   displayMatrix3(aInst3, MSIZE3);
   int result = 0;
   int convResult = 0;
   result = convUniDirectionSoft(sobel3x, aInst3, MSIZE3);
   xil_printf("Convolution in x direction. result is: %d \r\n", result);
   result = convUniDirectionSoft(sobel3y, aInst3, MSIZE3);
   xil_printf("Convolution in y direction. result is: %d \r\n", result);
   convResult = convSoft(sobel3x, sobel3y, aInst3, MSIZE3);
   xil_printf("Convolution result is: %d \r\n", convResult);

   setTestMatrix5(testMatrix, MSIZE5);
   displayMatrix5(testMatrix, MSIZE5);

   padding(testMatrix, testMatrixPadded);
   displayMatrix7(testMatrixPadded, MSIZE7);

   winSoft(testMatrix, testMatrix);



}




/*
 *    VectorArray3 tester;
   tester[0].comp[0] = 9;
   tester[0].comp[1] = 10;
   tester[0].comp[2] = 0;
   tester[1].comp[0] = 14;
   tester[1].comp[1] = 15;
   tester[1].comp[2] = 0;
   tester[2].comp[0] = 19;
   tester[2].comp[1] = 20;
   tester[2].comp[2] = 0;

   int testres;
   testres = convSoft(sobel3x, sobel3y, tester, MSIZE3);
   xil_printf("Convolution result is: %d \r\n", testres);
 *
 */
