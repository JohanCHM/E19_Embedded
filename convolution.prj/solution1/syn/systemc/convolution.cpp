// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "convolution.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic convolution::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic convolution::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> convolution::ap_ST_fsm_state1 = "1";
const sc_lv<7> convolution::ap_ST_fsm_state2 = "10";
const sc_lv<7> convolution::ap_ST_fsm_state3 = "100";
const sc_lv<7> convolution::ap_ST_fsm_state4 = "1000";
const sc_lv<7> convolution::ap_ST_fsm_state5 = "10000";
const sc_lv<7> convolution::ap_ST_fsm_state6 = "100000";
const sc_lv<7> convolution::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> convolution::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> convolution::ap_const_lv32_1 = "1";
const sc_lv<1> convolution::ap_const_lv1_0 = "0";
const sc_lv<32> convolution::ap_const_lv32_2 = "10";
const sc_lv<32> convolution::ap_const_lv32_3 = "11";
const sc_lv<32> convolution::ap_const_lv32_5 = "101";
const sc_lv<2> convolution::ap_const_lv2_0 = "00";
const sc_lv<1> convolution::ap_const_lv1_1 = "1";
const sc_lv<32> convolution::ap_const_lv32_6 = "110";
const sc_lv<2> convolution::ap_const_lv2_3 = "11";
const sc_lv<2> convolution::ap_const_lv2_1 = "1";
const sc_lv<2> convolution::ap_const_lv2_2 = "10";
const sc_lv<32> convolution::ap_const_lv32_4 = "100";
const bool convolution::ap_const_boolean_1 = true;

convolution::convolution(sc_module_name name) : sc_module(name), mVcdFile(0) {
    convolution_mul_3bkb_U0 = new convolution_mul_3bkb<1,2,32,32,32>("convolution_mul_3bkb_U0");
    convolution_mul_3bkb_U0->clk(ap_clk);
    convolution_mul_3bkb_U0->reset(ap_rst);
    convolution_mul_3bkb_U0->din0(k_load_reg_274);
    convolution_mul_3bkb_U0->din1(wdw_load_reg_279);
    convolution_mul_3bkb_U0->ce(ap_var_for_const0);
    convolution_mul_3bkb_U0->dout(grp_fu_213_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_127_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_127_p2 );

    SC_METHOD(thread_exitcond1_fu_127_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_78 );

    SC_METHOD(thread_exitcond_fu_181_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_89 );

    SC_METHOD(thread_i_1_fu_133_p2);
    sensitive << ( i_reg_78 );

    SC_METHOD(thread_i_cast2_cast_fu_105_p1);
    sensitive << ( i_reg_78 );

    SC_METHOD(thread_j_1_fu_187_p2);
    sensitive << ( j_reg_89 );

    SC_METHOD(thread_j_cast1_cast_fu_167_p1);
    sensitive << ( j_reg_89 );

    SC_METHOD(thread_k_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_12_cast_fu_208_p1 );

    SC_METHOD(thread_k_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_p_shl1_cast_fu_157_p1);
    sensitive << ( tmp_9_fu_149_p3 );

    SC_METHOD(thread_p_shl_cast_fu_117_p1);
    sensitive << ( tmp_7_fu_109_p3 );

    SC_METHOD(thread_res);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_6_fu_220_p2 );

    SC_METHOD(thread_res_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_tmp_10_fu_203_p2);
    sensitive << ( tmp_s_reg_251 );
    sensitive << ( tmp_4_cast_cast_fu_199_p1 );

    SC_METHOD(thread_tmp_11_cast_fu_176_p1);
    sensitive << ( tmp_2_fu_171_p2 );

    SC_METHOD(thread_tmp_12_cast_fu_208_p1);
    sensitive << ( tmp_10_fu_203_p2 );

    SC_METHOD(thread_tmp_1_cast_cast_fu_145_p1);
    sensitive << ( tmp_1_fu_139_p2 );

    SC_METHOD(thread_tmp_1_fu_139_p2);
    sensitive << ( i_reg_78 );

    SC_METHOD(thread_tmp_2_fu_171_p2);
    sensitive << ( tmp_8_reg_238 );
    sensitive << ( j_cast1_cast_fu_167_p1 );

    SC_METHOD(thread_tmp_4_cast_cast_fu_199_p1);
    sensitive << ( tmp_4_fu_193_p2 );

    SC_METHOD(thread_tmp_4_fu_193_p2);
    sensitive << ( j_reg_89 );

    SC_METHOD(thread_tmp_6_fu_220_p2);
    sensitive << ( tmp_5_reg_284 );
    sensitive << ( tmp_fu_42 );

    SC_METHOD(thread_tmp_7_fu_109_p3);
    sensitive << ( i_reg_78 );

    SC_METHOD(thread_tmp_8_fu_121_p2);
    sensitive << ( p_shl_cast_fu_117_p1 );
    sensitive << ( i_cast2_cast_fu_105_p1 );

    SC_METHOD(thread_tmp_9_fu_149_p3);
    sensitive << ( tmp_1_fu_139_p2 );

    SC_METHOD(thread_tmp_s_fu_161_p2);
    sensitive << ( p_shl1_cast_fu_157_p1 );
    sensitive << ( tmp_1_cast_cast_fu_145_p1 );

    SC_METHOD(thread_wdw_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_11_cast_fu_176_p1 );

    SC_METHOD(thread_wdw_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_127_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_181_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "convolution_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, k_address0, "(port)k_address0");
    sc_trace(mVcdFile, k_ce0, "(port)k_ce0");
    sc_trace(mVcdFile, k_q0, "(port)k_q0");
    sc_trace(mVcdFile, wdw_address0, "(port)wdw_address0");
    sc_trace(mVcdFile, wdw_ce0, "(port)wdw_ce0");
    sc_trace(mVcdFile, wdw_q0, "(port)wdw_q0");
    sc_trace(mVcdFile, res, "(port)res");
    sc_trace(mVcdFile, res_ap_vld, "(port)res_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_8_fu_121_p2, "tmp_8_fu_121_p2");
    sc_trace(mVcdFile, tmp_8_reg_238, "tmp_8_reg_238");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_1_fu_133_p2, "i_1_fu_133_p2");
    sc_trace(mVcdFile, i_1_reg_246, "i_1_reg_246");
    sc_trace(mVcdFile, tmp_s_fu_161_p2, "tmp_s_fu_161_p2");
    sc_trace(mVcdFile, tmp_s_reg_251, "tmp_s_reg_251");
    sc_trace(mVcdFile, exitcond1_fu_127_p2, "exitcond1_fu_127_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, j_1_fu_187_p2, "j_1_fu_187_p2");
    sc_trace(mVcdFile, j_1_reg_264, "j_1_reg_264");
    sc_trace(mVcdFile, exitcond_fu_181_p2, "exitcond_fu_181_p2");
    sc_trace(mVcdFile, k_load_reg_274, "k_load_reg_274");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, wdw_load_reg_279, "wdw_load_reg_279");
    sc_trace(mVcdFile, grp_fu_213_p2, "grp_fu_213_p2");
    sc_trace(mVcdFile, tmp_5_reg_284, "tmp_5_reg_284");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_reg_78, "i_reg_78");
    sc_trace(mVcdFile, j_reg_89, "j_reg_89");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_11_cast_fu_176_p1, "tmp_11_cast_fu_176_p1");
    sc_trace(mVcdFile, tmp_12_cast_fu_208_p1, "tmp_12_cast_fu_208_p1");
    sc_trace(mVcdFile, tmp_fu_42, "tmp_fu_42");
    sc_trace(mVcdFile, tmp_6_fu_220_p2, "tmp_6_fu_220_p2");
    sc_trace(mVcdFile, tmp_7_fu_109_p3, "tmp_7_fu_109_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_117_p1, "p_shl_cast_fu_117_p1");
    sc_trace(mVcdFile, i_cast2_cast_fu_105_p1, "i_cast2_cast_fu_105_p1");
    sc_trace(mVcdFile, tmp_1_fu_139_p2, "tmp_1_fu_139_p2");
    sc_trace(mVcdFile, tmp_9_fu_149_p3, "tmp_9_fu_149_p3");
    sc_trace(mVcdFile, p_shl1_cast_fu_157_p1, "p_shl1_cast_fu_157_p1");
    sc_trace(mVcdFile, tmp_1_cast_cast_fu_145_p1, "tmp_1_cast_cast_fu_145_p1");
    sc_trace(mVcdFile, j_cast1_cast_fu_167_p1, "j_cast1_cast_fu_167_p1");
    sc_trace(mVcdFile, tmp_2_fu_171_p2, "tmp_2_fu_171_p2");
    sc_trace(mVcdFile, tmp_4_fu_193_p2, "tmp_4_fu_193_p2");
    sc_trace(mVcdFile, tmp_4_cast_cast_fu_199_p1, "tmp_4_cast_cast_fu_199_p1");
    sc_trace(mVcdFile, tmp_10_fu_203_p2, "tmp_10_fu_203_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("convolution.hdltvin.dat");
    mHdltvoutHandle.open("convolution.hdltvout.dat");
}

convolution::~convolution() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete convolution_mul_3bkb_U0;
}

void convolution::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void convolution::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_181_p2.read(), ap_const_lv1_1))) {
        i_reg_78 = i_1_reg_246.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_78 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        j_reg_89 = j_1_reg_264.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_127_p2.read(), ap_const_lv1_0))) {
        j_reg_89 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_fu_42 = tmp_6_fu_220_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_fu_42 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_246 = i_1_fu_133_p2.read();
        tmp_8_reg_238 = tmp_8_fu_121_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_1_reg_264 = j_1_fu_187_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_load_reg_274 = k_q0.read();
        wdw_load_reg_279 = wdw_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tmp_5_reg_284 = grp_fu_213_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_127_p2.read(), ap_const_lv1_0))) {
        tmp_s_reg_251 = tmp_s_fu_161_p2.read();
    }
}

void convolution::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void convolution::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void convolution::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void convolution::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void convolution::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void convolution::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void convolution::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void convolution::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_127_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void convolution::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void convolution::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_127_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void convolution::thread_exitcond1_fu_127_p2() {
    exitcond1_fu_127_p2 = (!i_reg_78.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_78.read() == ap_const_lv2_3);
}

void convolution::thread_exitcond_fu_181_p2() {
    exitcond_fu_181_p2 = (!j_reg_89.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_89.read() == ap_const_lv2_3);
}

void convolution::thread_i_1_fu_133_p2() {
    i_1_fu_133_p2 = (!i_reg_78.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_reg_78.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void convolution::thread_i_cast2_cast_fu_105_p1() {
    i_cast2_cast_fu_105_p1 = esl_zext<5,2>(i_reg_78.read());
}

void convolution::thread_j_1_fu_187_p2() {
    j_1_fu_187_p2 = (!j_reg_89.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(j_reg_89.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void convolution::thread_j_cast1_cast_fu_167_p1() {
    j_cast1_cast_fu_167_p1 = esl_zext<5,2>(j_reg_89.read());
}

void convolution::thread_k_address0() {
    k_address0 =  (sc_lv<4>) (tmp_12_cast_fu_208_p1.read());
}

void convolution::thread_k_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        k_ce0 = ap_const_logic_1;
    } else {
        k_ce0 = ap_const_logic_0;
    }
}

void convolution::thread_p_shl1_cast_fu_157_p1() {
    p_shl1_cast_fu_157_p1 = esl_zext<5,4>(tmp_9_fu_149_p3.read());
}

void convolution::thread_p_shl_cast_fu_117_p1() {
    p_shl_cast_fu_117_p1 = esl_zext<5,4>(tmp_7_fu_109_p3.read());
}

void convolution::thread_res() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        res = tmp_6_fu_220_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        res = ap_const_lv32_0;
    } else {
        res = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void convolution::thread_res_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        res_ap_vld = ap_const_logic_1;
    } else {
        res_ap_vld = ap_const_logic_0;
    }
}

void convolution::thread_tmp_10_fu_203_p2() {
    tmp_10_fu_203_p2 = (!tmp_s_reg_251.read().is_01() || !tmp_4_cast_cast_fu_199_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_s_reg_251.read()) + sc_biguint<5>(tmp_4_cast_cast_fu_199_p1.read()));
}

void convolution::thread_tmp_11_cast_fu_176_p1() {
    tmp_11_cast_fu_176_p1 = esl_sext<32,5>(tmp_2_fu_171_p2.read());
}

void convolution::thread_tmp_12_cast_fu_208_p1() {
    tmp_12_cast_fu_208_p1 = esl_sext<32,5>(tmp_10_fu_203_p2.read());
}

void convolution::thread_tmp_1_cast_cast_fu_145_p1() {
    tmp_1_cast_cast_fu_145_p1 = esl_zext<5,2>(tmp_1_fu_139_p2.read());
}

void convolution::thread_tmp_1_fu_139_p2() {
    tmp_1_fu_139_p2 = (!ap_const_lv2_2.is_01() || !i_reg_78.read().is_01())? sc_lv<2>(): (sc_bigint<2>(ap_const_lv2_2) - sc_biguint<2>(i_reg_78.read()));
}

void convolution::thread_tmp_2_fu_171_p2() {
    tmp_2_fu_171_p2 = (!tmp_8_reg_238.read().is_01() || !j_cast1_cast_fu_167_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_8_reg_238.read()) + sc_biguint<5>(j_cast1_cast_fu_167_p1.read()));
}

void convolution::thread_tmp_4_cast_cast_fu_199_p1() {
    tmp_4_cast_cast_fu_199_p1 = esl_zext<5,2>(tmp_4_fu_193_p2.read());
}

void convolution::thread_tmp_4_fu_193_p2() {
    tmp_4_fu_193_p2 = (!ap_const_lv2_2.is_01() || !j_reg_89.read().is_01())? sc_lv<2>(): (sc_bigint<2>(ap_const_lv2_2) - sc_biguint<2>(j_reg_89.read()));
}

void convolution::thread_tmp_6_fu_220_p2() {
    tmp_6_fu_220_p2 = (!tmp_fu_42.read().is_01() || !tmp_5_reg_284.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_fu_42.read()) + sc_biguint<32>(tmp_5_reg_284.read()));
}

void convolution::thread_tmp_7_fu_109_p3() {
    tmp_7_fu_109_p3 = esl_concat<2,2>(i_reg_78.read(), ap_const_lv2_0);
}

void convolution::thread_tmp_8_fu_121_p2() {
    tmp_8_fu_121_p2 = (!p_shl_cast_fu_117_p1.read().is_01() || !i_cast2_cast_fu_105_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(p_shl_cast_fu_117_p1.read()) - sc_biguint<5>(i_cast2_cast_fu_105_p1.read()));
}

void convolution::thread_tmp_9_fu_149_p3() {
    tmp_9_fu_149_p3 = esl_concat<2,2>(tmp_1_fu_139_p2.read(), ap_const_lv2_0);
}

void convolution::thread_tmp_s_fu_161_p2() {
    tmp_s_fu_161_p2 = (!p_shl1_cast_fu_157_p1.read().is_01() || !tmp_1_cast_cast_fu_145_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(p_shl1_cast_fu_157_p1.read()) - sc_biguint<5>(tmp_1_cast_cast_fu_145_p1.read()));
}

void convolution::thread_wdw_address0() {
    wdw_address0 =  (sc_lv<4>) (tmp_11_cast_fu_176_p1.read());
}

void convolution::thread_wdw_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        wdw_ce0 = ap_const_logic_1;
    } else {
        wdw_ce0 = ap_const_logic_0;
    }
}

void convolution::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_127_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_181_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

void convolution::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_address0\" :  \"" << k_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_ce0\" :  \"" << k_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"k_q0\" :  \"" << k_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"wdw_address0\" :  \"" << wdw_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"wdw_ce0\" :  \"" << wdw_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"wdw_q0\" :  \"" << wdw_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res\" :  \"" << res.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_ap_vld\" :  \"" << res_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

