// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _convolution_HH_
#define _convolution_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "convolution_mul_3bkb.h"

namespace ap_rtl {

struct convolution : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > k_address0;
    sc_out< sc_logic > k_ce0;
    sc_in< sc_lv<32> > k_q0;
    sc_out< sc_lv<4> > wdw_address0;
    sc_out< sc_logic > wdw_ce0;
    sc_in< sc_lv<32> > wdw_q0;
    sc_out< sc_lv<32> > res;
    sc_out< sc_logic > res_ap_vld;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    convolution(sc_module_name name);
    SC_HAS_PROCESS(convolution);

    ~convolution();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    convolution_mul_3bkb<1,2,32,32,32>* convolution_mul_3bkb_U0;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > tmp_8_fu_121_p2;
    sc_signal< sc_lv<5> > tmp_8_reg_238;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > i_1_fu_133_p2;
    sc_signal< sc_lv<2> > i_1_reg_246;
    sc_signal< sc_lv<5> > tmp_s_fu_161_p2;
    sc_signal< sc_lv<5> > tmp_s_reg_251;
    sc_signal< sc_lv<1> > exitcond1_fu_127_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<2> > j_1_fu_187_p2;
    sc_signal< sc_lv<2> > j_1_reg_264;
    sc_signal< sc_lv<1> > exitcond_fu_181_p2;
    sc_signal< sc_lv<32> > k_load_reg_274;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > wdw_load_reg_279;
    sc_signal< sc_lv<32> > grp_fu_213_p2;
    sc_signal< sc_lv<32> > tmp_5_reg_284;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<2> > i_reg_78;
    sc_signal< sc_lv<2> > j_reg_89;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > tmp_11_cast_fu_176_p1;
    sc_signal< sc_lv<32> > tmp_12_cast_fu_208_p1;
    sc_signal< sc_lv<32> > tmp_fu_42;
    sc_signal< sc_lv<32> > tmp_6_fu_220_p2;
    sc_signal< sc_lv<4> > tmp_7_fu_109_p3;
    sc_signal< sc_lv<5> > p_shl_cast_fu_117_p1;
    sc_signal< sc_lv<5> > i_cast2_cast_fu_105_p1;
    sc_signal< sc_lv<2> > tmp_1_fu_139_p2;
    sc_signal< sc_lv<4> > tmp_9_fu_149_p3;
    sc_signal< sc_lv<5> > p_shl1_cast_fu_157_p1;
    sc_signal< sc_lv<5> > tmp_1_cast_cast_fu_145_p1;
    sc_signal< sc_lv<5> > j_cast1_cast_fu_167_p1;
    sc_signal< sc_lv<5> > tmp_2_fu_171_p2;
    sc_signal< sc_lv<2> > tmp_4_fu_193_p2;
    sc_signal< sc_lv<5> > tmp_4_cast_cast_fu_199_p1;
    sc_signal< sc_lv<5> > tmp_10_fu_203_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond1_fu_127_p2();
    void thread_exitcond_fu_181_p2();
    void thread_i_1_fu_133_p2();
    void thread_i_cast2_cast_fu_105_p1();
    void thread_j_1_fu_187_p2();
    void thread_j_cast1_cast_fu_167_p1();
    void thread_k_address0();
    void thread_k_ce0();
    void thread_p_shl1_cast_fu_157_p1();
    void thread_p_shl_cast_fu_117_p1();
    void thread_res();
    void thread_res_ap_vld();
    void thread_tmp_10_fu_203_p2();
    void thread_tmp_11_cast_fu_176_p1();
    void thread_tmp_12_cast_fu_208_p1();
    void thread_tmp_1_cast_cast_fu_145_p1();
    void thread_tmp_1_fu_139_p2();
    void thread_tmp_2_fu_171_p2();
    void thread_tmp_4_cast_cast_fu_199_p1();
    void thread_tmp_4_fu_193_p2();
    void thread_tmp_6_fu_220_p2();
    void thread_tmp_7_fu_109_p3();
    void thread_tmp_8_fu_121_p2();
    void thread_tmp_9_fu_149_p3();
    void thread_tmp_s_fu_161_p2();
    void thread_wdw_address0();
    void thread_wdw_ce0();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
