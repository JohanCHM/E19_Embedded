-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    k_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    k_ce0 : OUT STD_LOGIC;
    k_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wdw_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    wdw_ce0 : OUT STD_LOGIC;
    wdw_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    res : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_ap_vld : OUT STD_LOGIC );
end;


architecture behav of convolution is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolution,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=52,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=549,HLS_SYN_LUT=250}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_8_fu_121_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_reg_238 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_133_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_246 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_161_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_251 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_1_fu_187_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_264 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_load_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal wdw_load_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_reg_78 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_89 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_11_cast_fu_176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_cast_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_42 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_109_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_117_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_cast2_cast_fu_105_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_139_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_149_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_157_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_cast_cast_fu_145_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_cast1_cast_fu_167_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_171_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_193_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_cast_cast_fu_199_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_203_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component convolution_mul_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    convolution_mul_3bkb_U0 : component convolution_mul_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => k_load_reg_274,
        din1 => wdw_load_reg_279,
        ce => ap_const_logic_1,
        dout => grp_fu_213_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_181_p2 = ap_const_lv1_1))) then 
                i_reg_78 <= i_1_reg_246;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_78 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_reg_89 <= j_1_reg_264;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_127_p2 = ap_const_lv1_0))) then 
                j_reg_89 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    tmp_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                tmp_fu_42 <= tmp_6_fu_220_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                tmp_fu_42 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_246 <= i_1_fu_133_p2;
                tmp_8_reg_238 <= tmp_8_fu_121_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_264 <= j_1_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_load_reg_274 <= k_q0;
                wdw_load_reg_279 <= wdw_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_5_reg_284 <= grp_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_127_p2 = ap_const_lv1_0))) then
                tmp_s_reg_251 <= tmp_s_fu_161_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_127_p2, ap_CS_fsm_state3, exitcond_fu_181_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_127_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_181_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_127_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_127_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_127_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_127_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_127_p2 <= "1" when (i_reg_78 = ap_const_lv2_3) else "0";
    exitcond_fu_181_p2 <= "1" when (j_reg_89 = ap_const_lv2_3) else "0";
    i_1_fu_133_p2 <= std_logic_vector(unsigned(i_reg_78) + unsigned(ap_const_lv2_1));
    i_cast2_cast_fu_105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_78),5));
    j_1_fu_187_p2 <= std_logic_vector(unsigned(j_reg_89) + unsigned(ap_const_lv2_1));
    j_cast1_cast_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_89),5));
    k_address0 <= tmp_12_cast_fu_208_p1(4 - 1 downto 0);

    k_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            k_ce0 <= ap_const_logic_1;
        else 
            k_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_149_p3),5));
    p_shl_cast_fu_117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_109_p3),5));

    res_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, tmp_6_fu_220_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            res <= tmp_6_fu_220_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            res <= ap_const_lv32_0;
        else 
            res <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            res_ap_vld <= ap_const_logic_1;
        else 
            res_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_203_p2 <= std_logic_vector(unsigned(tmp_s_reg_251) + unsigned(tmp_4_cast_cast_fu_199_p1));
        tmp_11_cast_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_171_p2),32));

        tmp_12_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_203_p2),32));

    tmp_1_cast_cast_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_139_p2),5));
    tmp_1_fu_139_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(i_reg_78));
    tmp_2_fu_171_p2 <= std_logic_vector(unsigned(tmp_8_reg_238) + unsigned(j_cast1_cast_fu_167_p1));
    tmp_4_cast_cast_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_193_p2),5));
    tmp_4_fu_193_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(j_reg_89));
    tmp_6_fu_220_p2 <= std_logic_vector(unsigned(tmp_fu_42) + unsigned(tmp_5_reg_284));
    tmp_7_fu_109_p3 <= (i_reg_78 & ap_const_lv2_0);
    tmp_8_fu_121_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_117_p1) - unsigned(i_cast2_cast_fu_105_p1));
    tmp_9_fu_149_p3 <= (tmp_1_fu_139_p2 & ap_const_lv2_0);
    tmp_s_fu_161_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_157_p1) - unsigned(tmp_1_cast_cast_fu_145_p1));
    wdw_address0 <= tmp_11_cast_fu_176_p1(4 - 1 downto 0);

    wdw_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            wdw_ce0 <= ap_const_logic_1;
        else 
            wdw_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
